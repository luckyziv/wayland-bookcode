//ljlj client端代码
#include <stdio.h>

#define _POSIX_C_SOURCE 200112L
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdbool.h>
#include <string.h>
#include <sys/mman.h>
#include <time.h>
#include <unistd.h>
#include <wayland-client.h>


/* Wayland code */
struct client_state {
    /* Globals */
    struct wl_display *wl_display;
    struct wl_registry *wl_registry;

	struct wl_seat *wl_seat;
    struct wl_pointer *wl_pointer;

};

static void
wl_pointer_enter(void *data, struct wl_pointer *wl_pointer,
                uint32_t serial, struct wl_surface *surface,
                wl_fixed_t surface_x, wl_fixed_t surface_y)
{
    printf("ljlj enter surface!");
}

static const struct wl_pointer_listener wl_pointer_listener = {
    .enter = wl_pointer_enter,
};

/* ljlj server端发送，获取到的seat支持设备种类 */
static void
wl_seat_capabilities (void *data, struct wl_seat *wl_seat, uint32_t capbilities)
{
    struct client_state *state = data;
    /* TODO */

    bool have_pointer = capbilities & WL_SEAT_CAPABILITY_POINTER;
    if (have_pointer && (state->wl_pointer == NULL)) {
        state->wl_pointer = wl_seat_get_pointer(state->wl_seat);
        wl_pointer_add_listener(state->wl_pointer, &wl_pointer_listener, state);
    } else if (!have_pointer && (state->wl_pointer != NULL)) {
        wl_pointer_release(state->wl_pointer);
        state->wl_pointer = NULL;
    }
}

static void
wl_seat_name (void *data, struct wl_seat *wl_seat, const char* name)
{
    printf("ljlj wl_seat name:%s\r\n", name);
}

static const struct wl_seat_listener  wl_seat_listener = {
    .capabilities =  wl_seat_capabilities,
    .name = wl_seat_name,
};


//ljlj client端使用wl_registry绑定指定 global
static void
registry_global(void *data, struct wl_registry *wl_registry,
        uint32_t name, const char *interface, uint32_t version)
{
    struct client_state *state = data;
    if (strcmp(interface, wl_seat_interface.name) == 0) {
        //ljlj 绑定wl_seat，从而获取wl_seat
        state->wl_seat= wl_registry_bind(wl_registry, name, &wl_seat_interface, 5);
		wl_seat_add_listener(state->wl_seat, &wl_seat_listener, state);
    }
}

static void
registry_global_remove(void *data,
        struct wl_registry *wl_registry, uint32_t name)
{
    /* This space deliberately left blank */
}

static const struct wl_registry_listener wl_registry_listener = {
    .global = registry_global,
    .global_remove = registry_global_remove,
};

int
main(int argc, char *argv[])
{
    struct client_state state = { 0 };
    state.wl_display = wl_display_connect(NULL);
    state.wl_registry = wl_display_get_registry(state.wl_display);
    wl_registry_add_listener(state.wl_registry, &wl_registry_listener, &state);
    wl_display_roundtrip(state.wl_display);


    while (wl_display_dispatch(state.wl_display)) {
        /* This space deliberately left blank */
    }

    return 0;
}
